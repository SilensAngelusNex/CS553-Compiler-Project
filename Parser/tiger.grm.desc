16 reduce/reduce conflicts
2 shift/reduce conflicts
13 rules not reduced

warning: rule <boolExp : addExp AND boolExp > will never be reduced
warning: rule <boolExp : addExp OR boolExp > will never be reduced
warning: rule <boolExp : addExp comparator addExp > will never be reduced
warning: rule <boolExp : addExp comparator LPAREN boolExp RPAREN > will never be reduced
warning: rule <boolExp : LPAREN boolExp RPAREN comparator addExp > will never be reduced
warning: rule <boolExp : LPAREN boolExp RPAREN > will never be reduced
warning: rule <boolExp : addExp > will never be reduced
warning: rule <comparator : EQ > will never be reduced
warning: rule <comparator : NEQ > will never be reduced
warning: rule <comparator : LT > will never be reduced
warning: rule <comparator : LE > will never be reduced
warning: rule <comparator : GT > will never be reduced
warning: rule <comparator : GE > will never be reduced
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on TYPE
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on VAR
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on FUNCTION
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on END
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on IN
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on DO
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on TO
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on ELSE
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on THEN
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on RBRACE
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on RBRACK
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on RPAREN
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on SEMICOLON
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on COMMA
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on EOF
error:  state 22: reduce/reduce conflict between rule 69 and rule 27 on LBRACK
error:  state 44: shift/reduce conflict (shift RPAREN, reduce by rule 39)
error:  state 93: shift/reduce conflict (shift ELSE, reduce by rule 2)

state 0:

	program : . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 10
	program	goto 135
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 1:

	term : lvalue .  (reduce by rule 64)
	lvalue : lvalue . LBRACK exp RBRACK 
	lvalue : lvalue . DOT ID 

	LBRACK	shift 24
	DOT	shift 23


	.	reduce by rule 64

error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on TYPE
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on VAR
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on FUNCTION
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on END
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on IN
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on DO
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on TO
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on ELSE
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on THEN
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on RBRACE
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on RBRACK
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on RPAREN
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on SEMICOLON
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on COMMA
error:  state 2: reduce/reduce conflict between rule 47 and rule 10 on EOF

state 2:

	exp : term .  (reduce by rule 10)
	parenExp : term .  (reduce by rule 47)

	EOF	reduce by rule 10
	COMMA	reduce by rule 10
	SEMICOLON	reduce by rule 10
	RPAREN	reduce by rule 10
	RBRACK	reduce by rule 10
	RBRACE	reduce by rule 10
	PLUS	reduce by rule 47
	MINUS	reduce by rule 47
	TIMES	reduce by rule 47
	DIVIDE	reduce by rule 47
	THEN	reduce by rule 10
	ELSE	reduce by rule 10
	TO	reduce by rule 10
	DO	reduce by rule 10
	IN	reduce by rule 10
	END	reduce by rule 10
	FUNCTION	reduce by rule 10
	VAR	reduce by rule 10
	TYPE	reduce by rule 10


	.	error


state 3:

	multExp : parenExp . DIVIDE multExp 
	multExp : parenExp . TIMES multExp 
	multExp : parenExp .  (reduce by rule 45)

	TIMES	shift 26
	DIVIDE	shift 25


	.	reduce by rule 45


state 4:

	addExp : multExp . PLUS addExp 
	addExp : multExp . MINUS addExp 
	addExp : multExp .  (reduce by rule 42)

	PLUS	shift 28
	MINUS	shift 27


	.	reduce by rule 42


state 5:

	exp : addExp .  (reduce by rule 9)



	.	reduce by rule 9


state 6:

	exp : function .  (reduce by rule 8)



	.	reduce by rule 8


state 7:

	exp : record .  (reduce by rule 5)



	.	reduce by rule 5


state 8:

	exp : typeDef . LBRACK exp RBRACK OF exp 

	LBRACK	shift 29


	.	error


state 9:

	exp : let .  (reduce by rule 7)



	.	reduce by rule 7


state 10:

	program : exp .  (reduce by rule 0)



	.	reduce by rule 0


state 11:

	exp : NIL .  (reduce by rule 12)



	.	reduce by rule 12


state 12:

	term : BREAK .  (reduce by rule 66)



	.	reduce by rule 66


state 13:

	let : LET . dec IN sequence END 

	FUNCTION	shift 36
	VAR	shift 35
	TYPE	shift 34

	dec	goto 33
	varDec	goto 32
	typeDec	goto 31
	funcDec	goto 30

	.	reduce by rule 17


state 14:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 37


	.	error


state 15:

	exp : WHILE . exp DO exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 38
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 16:

	exp : IF . exp THEN exp ELSE exp 
	exp : IF . exp THEN exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 39
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 17:

	term : MINUS . INT 

	INT	shift 40


	.	error


state 18:

	typeDef : LBRACE . argDef RBRACE 

	ID	shift 42

	argDef	goto 41

	.	error


state 19:

	exp : LPAREN . sequence RPAREN 
	parenExp : LPAREN . exp RPAREN 
	term : LPAREN . RPAREN 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	RPAREN	shift 45
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 44
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	sequence	goto 43
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 20:

	term : STRING .  (reduce by rule 63)



	.	reduce by rule 63


state 21:

	term : INT .  (reduce by rule 61)



	.	reduce by rule 61

error:  state 22: reduce/reduce conflict between rule 69 and rule 27 on LBRACK

state 22:

	typeDef : ID . OF typeDef 
	typeDef : ID .  (reduce by rule 27)
	record : ID . LBRACE RBRACE 
	record : ID . LBRACE recArgs RBRACE 
	function : ID . LPAREN RPAREN 
	function : ID . LPAREN args RPAREN 
	lvalue : ID .  (reduce by rule 69)

	EOF	reduce by rule 69
	COMMA	reduce by rule 69
	SEMICOLON	reduce by rule 69
	LPAREN	shift 48
	RPAREN	reduce by rule 69
	LBRACK	reduce by rule 27
	RBRACK	reduce by rule 69
	LBRACE	shift 47
	RBRACE	reduce by rule 69
	DOT	reduce by rule 69
	PLUS	reduce by rule 69
	MINUS	reduce by rule 69
	TIMES	reduce by rule 69
	DIVIDE	reduce by rule 69
	THEN	reduce by rule 69
	ELSE	reduce by rule 69
	TO	reduce by rule 69
	DO	reduce by rule 69
	IN	reduce by rule 69
	END	reduce by rule 69
	OF	shift 46
	FUNCTION	reduce by rule 69
	VAR	reduce by rule 69
	TYPE	reduce by rule 69


	.	error


state 23:

	lvalue : lvalue DOT . ID 

	ID	shift 49


	.	error


state 24:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 50
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 25:

	multExp : parenExp DIVIDE . multExp 

	ID	shift 54
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 53
	MINUS	shift 17
	BREAK	shift 12

	multExp	goto 52
	parenExp	goto 3
	term	goto 51
	lvalue	goto 1

	.	error


state 26:

	multExp : parenExp TIMES . multExp 

	ID	shift 54
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 53
	MINUS	shift 17
	BREAK	shift 12

	multExp	goto 55
	parenExp	goto 3
	term	goto 51
	lvalue	goto 1

	.	error


state 27:

	addExp : multExp MINUS . addExp 

	ID	shift 54
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 53
	MINUS	shift 17
	BREAK	shift 12

	addExp	goto 56
	multExp	goto 4
	parenExp	goto 3
	term	goto 51
	lvalue	goto 1

	.	error


state 28:

	addExp : multExp PLUS . addExp 

	ID	shift 54
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 53
	MINUS	shift 17
	BREAK	shift 12

	addExp	goto 57
	multExp	goto 4
	parenExp	goto 3
	term	goto 51
	lvalue	goto 1

	.	error


state 29:

	exp : typeDef LBRACK . exp RBRACK OF exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 58
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 30:

	dec : funcDec . dec 

	FUNCTION	shift 36
	VAR	shift 35
	TYPE	shift 34

	dec	goto 59
	varDec	goto 32
	typeDec	goto 31
	funcDec	goto 30

	.	reduce by rule 17


state 31:

	dec : typeDec . dec 

	FUNCTION	shift 36
	VAR	shift 35
	TYPE	shift 34

	dec	goto 60
	varDec	goto 32
	typeDec	goto 31
	funcDec	goto 30

	.	reduce by rule 17


state 32:

	dec : varDec . dec 

	FUNCTION	shift 36
	VAR	shift 35
	TYPE	shift 34

	dec	goto 61
	varDec	goto 32
	typeDec	goto 31
	funcDec	goto 30

	.	reduce by rule 17


state 33:

	let : LET dec . IN sequence END 

	IN	shift 62


	.	error


state 34:

	typeDec : TYPE . ID EQ typeDef 

	ID	shift 63


	.	error


state 35:

	varDec : VAR . ID ASSIGN exp 
	varDec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 64


	.	error


state 36:

	funcDec : FUNCTION . ID LPAREN argDef RPAREN COLON ID EQ exp 
	funcDec : FUNCTION . ID LPAREN RPAREN COLON ID EQ exp 
	funcDec : FUNCTION . ID LPAREN argDef RPAREN EQ exp 
	funcDec : FUNCTION . ID LPAREN RPAREN EQ exp 

	ID	shift 65


	.	error


state 37:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 66


	.	error


state 38:

	exp : WHILE exp . DO exp 

	DO	shift 67


	.	error


state 39:

	exp : IF exp . THEN exp ELSE exp 
	exp : IF exp . THEN exp 

	THEN	shift 68


	.	error


state 40:

	term : MINUS INT .  (reduce by rule 62)



	.	reduce by rule 62


state 41:

	typeDef : LBRACE argDef . RBRACE 

	RBRACE	shift 69


	.	error


state 42:

	argDef : ID . COLON typeDef COMMA argDef 
	argDef : ID . COLON typeDef 

	COLON	shift 70


	.	error


state 43:

	exp : LPAREN sequence . RPAREN 

	RPAREN	shift 71


	.	error

error:  state 44: shift/reduce conflict (shift RPAREN, reduce by rule 39)

state 44:

	sequence : exp . SEMICOLON sequence 
	sequence : exp .  (reduce by rule 39)
	parenExp : LPAREN exp . RPAREN 

	SEMICOLON	shift 73
	RPAREN	shift 72


	.	error


state 45:

	term : LPAREN RPAREN .  (reduce by rule 65)



	.	reduce by rule 65


state 46:

	typeDef : ID OF . typeDef 

	ID	shift 75
	LBRACE	shift 18

	typeDef	goto 74

	.	error


state 47:

	record : ID LBRACE . RBRACE 
	record : ID LBRACE . recArgs RBRACE 

	ID	shift 78
	RBRACE	shift 77

	recArgs	goto 76

	.	error


state 48:

	function : ID LPAREN . RPAREN 
	function : ID LPAREN . args RPAREN 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	RPAREN	shift 81
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 80
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	args	goto 79
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 49:

	lvalue : lvalue DOT ID .  (reduce by rule 68)



	.	reduce by rule 68


state 50:

	lvalue : lvalue LBRACK exp . RBRACK 

	RBRACK	shift 82


	.	error


state 51:

	parenExp : term .  (reduce by rule 47)



	.	reduce by rule 47


state 52:

	multExp : parenExp DIVIDE multExp .  (reduce by rule 43)



	.	reduce by rule 43


state 53:

	parenExp : LPAREN . exp RPAREN 
	term : LPAREN . RPAREN 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	RPAREN	shift 45
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 83
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 54:

	lvalue : ID .  (reduce by rule 69)



	.	reduce by rule 69


state 55:

	multExp : parenExp TIMES multExp .  (reduce by rule 44)



	.	reduce by rule 44


state 56:

	addExp : multExp MINUS addExp .  (reduce by rule 41)



	.	reduce by rule 41


state 57:

	addExp : multExp PLUS addExp .  (reduce by rule 40)



	.	reduce by rule 40


state 58:

	exp : typeDef LBRACK exp . RBRACK OF exp 

	RBRACK	shift 84


	.	error


state 59:

	dec : funcDec dec .  (reduce by rule 16)



	.	reduce by rule 16


state 60:

	dec : typeDec dec .  (reduce by rule 15)



	.	reduce by rule 15


state 61:

	dec : varDec dec .  (reduce by rule 14)



	.	reduce by rule 14


state 62:

	let : LET dec IN . sequence END 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 86
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	sequence	goto 85
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 63:

	typeDec : TYPE ID . EQ typeDef 

	EQ	shift 87


	.	error


state 64:

	varDec : VAR ID . ASSIGN exp 
	varDec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 89
	ASSIGN	shift 88


	.	error


state 65:

	funcDec : FUNCTION ID . LPAREN argDef RPAREN COLON ID EQ exp 
	funcDec : FUNCTION ID . LPAREN RPAREN COLON ID EQ exp 
	funcDec : FUNCTION ID . LPAREN argDef RPAREN EQ exp 
	funcDec : FUNCTION ID . LPAREN RPAREN EQ exp 

	LPAREN	shift 90


	.	error


state 66:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 91
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 67:

	exp : WHILE exp DO . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 92
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 68:

	exp : IF exp THEN . exp ELSE exp 
	exp : IF exp THEN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 93
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 69:

	typeDef : LBRACE argDef RBRACE .  (reduce by rule 25)



	.	reduce by rule 25


state 70:

	argDef : ID COLON . typeDef COMMA argDef 
	argDef : ID COLON . typeDef 

	ID	shift 75
	LBRACE	shift 18

	typeDef	goto 94

	.	error


state 71:

	exp : LPAREN sequence RPAREN .  (reduce by rule 6)



	.	reduce by rule 6


state 72:

	parenExp : LPAREN exp RPAREN .  (reduce by rule 46)



	.	reduce by rule 46


state 73:

	sequence : exp SEMICOLON . sequence 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 86
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	sequence	goto 95
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 74:

	typeDef : ID OF typeDef .  (reduce by rule 26)



	.	reduce by rule 26


state 75:

	typeDef : ID . OF typeDef 
	typeDef : ID .  (reduce by rule 27)

	OF	shift 46


	.	reduce by rule 27


state 76:

	record : ID LBRACE recArgs . RBRACE 

	RBRACE	shift 96


	.	error


state 77:

	record : ID LBRACE RBRACE .  (reduce by rule 30)



	.	reduce by rule 30


state 78:

	recArgs : ID . EQ exp COMMA recArgs 
	recArgs : ID . EQ exp 

	EQ	shift 97


	.	error


state 79:

	function : ID LPAREN args . RPAREN 

	RPAREN	shift 98


	.	error


state 80:

	args : exp . COMMA args 
	args : exp .  (reduce by rule 37)

	COMMA	shift 99


	.	reduce by rule 37


state 81:

	function : ID LPAREN RPAREN .  (reduce by rule 34)



	.	reduce by rule 34


state 82:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 67)



	.	reduce by rule 67


state 83:

	parenExp : LPAREN exp . RPAREN 

	RPAREN	shift 72


	.	error


state 84:

	exp : typeDef LBRACK exp RBRACK . OF exp 

	OF	shift 100


	.	error


state 85:

	let : LET dec IN sequence . END 

	END	shift 101


	.	error


state 86:

	sequence : exp . SEMICOLON sequence 
	sequence : exp .  (reduce by rule 39)

	SEMICOLON	shift 73


	.	reduce by rule 39


state 87:

	typeDec : TYPE ID EQ . typeDef 

	ID	shift 75
	LBRACE	shift 18

	typeDef	goto 102

	.	error


state 88:

	varDec : VAR ID ASSIGN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 103
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 89:

	varDec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 104


	.	error


state 90:

	funcDec : FUNCTION ID LPAREN . argDef RPAREN COLON ID EQ exp 
	funcDec : FUNCTION ID LPAREN . RPAREN COLON ID EQ exp 
	funcDec : FUNCTION ID LPAREN . argDef RPAREN EQ exp 
	funcDec : FUNCTION ID LPAREN . RPAREN EQ exp 

	ID	shift 42
	RPAREN	shift 106

	argDef	goto 105

	.	error


state 91:

	exp : FOR ID ASSIGN exp . TO exp DO exp 

	TO	shift 107


	.	error


state 92:

	exp : WHILE exp DO exp .  (reduce by rule 3)



	.	reduce by rule 3

error:  state 93: shift/reduce conflict (shift ELSE, reduce by rule 2)

state 93:

	exp : IF exp THEN exp . ELSE exp 
	exp : IF exp THEN exp .  (reduce by rule 2)

	ELSE	shift 108


	.	reduce by rule 2


state 94:

	argDef : ID COLON typeDef . COMMA argDef 
	argDef : ID COLON typeDef .  (reduce by rule 29)

	COMMA	shift 109


	.	reduce by rule 29


state 95:

	sequence : exp SEMICOLON sequence .  (reduce by rule 38)



	.	reduce by rule 38


state 96:

	record : ID LBRACE recArgs RBRACE .  (reduce by rule 31)



	.	reduce by rule 31


state 97:

	recArgs : ID EQ . exp COMMA recArgs 
	recArgs : ID EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 110
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 98:

	function : ID LPAREN args RPAREN .  (reduce by rule 35)



	.	reduce by rule 35


state 99:

	args : exp COMMA . args 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 80
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	args	goto 111
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 100:

	exp : typeDef LBRACK exp RBRACK OF . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 112
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 101:

	let : LET dec IN sequence END .  (reduce by rule 13)



	.	reduce by rule 13


state 102:

	typeDec : TYPE ID EQ typeDef .  (reduce by rule 20)



	.	reduce by rule 20


state 103:

	varDec : VAR ID ASSIGN exp .  (reduce by rule 18)



	.	reduce by rule 18


state 104:

	varDec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 113


	.	error


state 105:

	funcDec : FUNCTION ID LPAREN argDef . RPAREN COLON ID EQ exp 
	funcDec : FUNCTION ID LPAREN argDef . RPAREN EQ exp 

	RPAREN	shift 114


	.	error


state 106:

	funcDec : FUNCTION ID LPAREN RPAREN . COLON ID EQ exp 
	funcDec : FUNCTION ID LPAREN RPAREN . EQ exp 

	COLON	shift 116
	EQ	shift 115


	.	error


state 107:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 117
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 108:

	exp : IF exp THEN exp ELSE . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 118
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 109:

	argDef : ID COLON typeDef COMMA . argDef 

	ID	shift 42

	argDef	goto 119

	.	error


state 110:

	recArgs : ID EQ exp . COMMA recArgs 
	recArgs : ID EQ exp .  (reduce by rule 33)

	COMMA	shift 120


	.	reduce by rule 33


state 111:

	args : exp COMMA args .  (reduce by rule 36)



	.	reduce by rule 36


state 112:

	exp : typeDef LBRACK exp RBRACK OF exp .  (reduce by rule 11)



	.	reduce by rule 11


state 113:

	varDec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 121
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 114:

	funcDec : FUNCTION ID LPAREN argDef RPAREN . COLON ID EQ exp 
	funcDec : FUNCTION ID LPAREN argDef RPAREN . EQ exp 

	COLON	shift 123
	EQ	shift 122


	.	error


state 115:

	funcDec : FUNCTION ID LPAREN RPAREN EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 124
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 116:

	funcDec : FUNCTION ID LPAREN RPAREN COLON . ID EQ exp 

	ID	shift 125


	.	error


state 117:

	exp : FOR ID ASSIGN exp TO exp . DO exp 

	DO	shift 126


	.	error


state 118:

	exp : IF exp THEN exp ELSE exp .  (reduce by rule 1)



	.	reduce by rule 1


state 119:

	argDef : ID COLON typeDef COMMA argDef .  (reduce by rule 28)



	.	reduce by rule 28


state 120:

	recArgs : ID EQ exp COMMA . recArgs 

	ID	shift 78

	recArgs	goto 127

	.	error


state 121:

	varDec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 19)



	.	reduce by rule 19


state 122:

	funcDec : FUNCTION ID LPAREN argDef RPAREN EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 128
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 123:

	funcDec : FUNCTION ID LPAREN argDef RPAREN COLON . ID EQ exp 

	ID	shift 129


	.	error


state 124:

	funcDec : FUNCTION ID LPAREN RPAREN EQ exp .  (reduce by rule 24)



	.	reduce by rule 24


state 125:

	funcDec : FUNCTION ID LPAREN RPAREN COLON ID . EQ exp 

	EQ	shift 130


	.	error


state 126:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 131
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 127:

	recArgs : ID EQ exp COMMA recArgs .  (reduce by rule 32)



	.	reduce by rule 32


state 128:

	funcDec : FUNCTION ID LPAREN argDef RPAREN EQ exp .  (reduce by rule 23)



	.	reduce by rule 23


state 129:

	funcDec : FUNCTION ID LPAREN argDef RPAREN COLON ID . EQ exp 

	EQ	shift 132


	.	error


state 130:

	funcDec : FUNCTION ID LPAREN RPAREN COLON ID EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 133
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 131:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 4)



	.	reduce by rule 4


state 132:

	funcDec : FUNCTION ID LPAREN argDef RPAREN COLON ID EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	LBRACE	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 134
	let	goto 9
	typeDef	goto 8
	record	goto 7
	function	goto 6
	addExp	goto 5
	multExp	goto 4
	parenExp	goto 3
	term	goto 2
	lvalue	goto 1

	.	error


state 133:

	funcDec : FUNCTION ID LPAREN RPAREN COLON ID EQ exp .  (reduce by rule 22)



	.	reduce by rule 22


state 134:

	funcDec : FUNCTION ID LPAREN argDef RPAREN COLON ID EQ exp .  (reduce by rule 21)



	.	reduce by rule 21


state 135:


	EOF	accept


	.	error

152 of 585 action table entries left after compaction
298 goto table entries
