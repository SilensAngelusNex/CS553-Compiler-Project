%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp | program | dec | varDec | funcDec | typeDef | argDef | seqExp | sequence | boolExp | compExp | addExp | multExp | parenExp | comparator | term | lvalue

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN


%value ID ("bogus")
%value INT (1)
%value STRING ("")

%change EQ -> ASSIGN
        | ASSIGN -> EQ
        | SEMICOLON ELSE -> ELSE
        |   -> IN INT END

%nonassoc THEN
%nonassoc ELSE
%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar.
 *)

program	: exp        			    ()

exp : boolExp                       ()
    | IF exp THEN exp    %prec THEN ()
    | IF exp THEN exp ELSE exp      ()
    | WHILE exp DO exp              ()
    | FOR ID ASSIGN exp TO exp DO exp   ()
    | dec                           ()

dec : varDec                        ()
    | funcDec                       ()

varDec : VAR ID ASSIGN exp          ()
       | VAR ID COLON ID ASSIGN exp ()

funcDec : FUNCTION ID LPAREN argDef RPAREN COLON ID EQ exp ()
        | FUNCTION ID LPAREN RPAREN COLON ID EQ exp ()
        | FUNCTION ID LPAREN argDef RPAREN EQ exp ()
        | FUNCTION ID LPAREN RPAREN EQ exp ()

typeDef : LBRACE argDef RBRACE      ()
        | ID OF typeDef             ()
        | ID                        ()

argDef : ID COLON typeDef COMMA argDef   ()
       | ID COLON typeDef                ()

boolExp : compExp AND boolExp       ()
        | compExp OR boolExp        ()
        | compExp                   ()

compExp : addExp comparator addExp  ()
        | addExp                    ()

addExp : multExp PLUS addExp        ()
       | multExp MINUS addExp       ()
       | multExp                    ()

multExp : parenExp DIVIDE multExp   ()
        | parenExp TIMES multExp    ()
        | parenExp                  ()

parenExp : LPAREN exp RPAREN        ()
         | term                     ()

comparator : EQ                     ()
       | NEQ                        ()
       | LT                         ()
       | LE                         ()
       | GT                         ()
       | GE                         ()

term : INT                          ()
     | MINUS INT                    ()
     | STRING                       ()
     | lvalue                       ()
     | LPAREN RPAREN                ()
     | BREAK                        ()

lvalue : lvalue LBRACK exp RBRACK   ()
       | lvalue DOT ID              ()
       | ID                         ()
