functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\002\000\024\000\003\000\023\000\004\000\022\000\008\000\021\000\
\\009\000\054\000\016\000\020\000\029\000\019\000\032\000\018\000\
\\033\000\017\000\036\000\016\000\040\000\015\000\041\000\014\000\000\000\
\\001\000\002\000\024\000\003\000\023\000\004\000\022\000\008\000\021\000\
\\009\000\094\000\016\000\020\000\029\000\019\000\032\000\018\000\
\\033\000\017\000\036\000\016\000\040\000\015\000\041\000\014\000\000\000\
\\001\000\002\000\024\000\003\000\023\000\004\000\022\000\008\000\021\000\
\\016\000\020\000\029\000\019\000\032\000\018\000\033\000\017\000\
\\036\000\016\000\040\000\015\000\041\000\014\000\000\000\
\\001\000\002\000\049\000\000\000\
\\001\000\002\000\058\000\000\000\
\\001\000\002\000\081\000\000\000\
\\001\000\002\000\082\000\000\000\
\\001\000\002\000\083\000\000\000\
\\001\000\002\000\092\000\013\000\091\000\000\000\
\\001\000\002\000\137\000\012\000\136\000\028\000\135\000\000\000\
\\001\000\002\000\139\000\000\000\
\\001\000\002\000\141\000\009\000\140\000\000\000\
\\001\000\002\000\150\000\013\000\149\000\000\000\
\\001\000\002\000\161\000\000\000\
\\001\000\002\000\165\000\000\000\
\\001\000\002\000\166\000\000\000\
\\001\000\002\000\168\000\000\000\
\\001\000\002\000\169\000\000\000\
\\001\000\002\000\179\000\000\000\
\\001\000\002\000\186\000\000\000\
\\001\000\002\000\187\000\000\000\
\\001\000\005\000\123\000\009\000\122\000\015\000\039\000\016\000\038\000\
\\017\000\037\000\018\000\036\000\019\000\035\000\020\000\034\000\
\\021\000\033\000\022\000\032\000\023\000\031\000\024\000\030\000\
\\025\000\029\000\026\000\028\000\000\000\
\\001\000\005\000\159\000\013\000\158\000\015\000\039\000\016\000\038\000\
\\017\000\037\000\018\000\036\000\019\000\035\000\020\000\034\000\
\\021\000\033\000\022\000\032\000\023\000\031\000\024\000\030\000\
\\025\000\029\000\026\000\028\000\000\000\
\\001\000\005\000\173\000\013\000\172\000\000\000\
\\001\000\006\000\113\000\027\000\112\000\000\000\
\\001\000\006\000\153\000\019\000\152\000\000\000\
\\001\000\006\000\154\000\000\000\
\\001\000\006\000\162\000\000\000\
\\001\000\006\000\182\000\019\000\181\000\000\000\
\\001\000\006\000\183\000\000\000\
\\001\000\007\000\090\000\009\000\089\000\015\000\039\000\016\000\038\000\
\\017\000\037\000\018\000\036\000\019\000\035\000\020\000\034\000\
\\021\000\033\000\022\000\032\000\023\000\031\000\024\000\030\000\
\\025\000\029\000\026\000\028\000\000\000\
\\001\000\008\000\021\000\000\000\
\\001\000\008\000\114\000\000\000\
\\001\000\009\000\178\000\000\000\
\\001\000\011\000\095\000\015\000\039\000\016\000\038\000\017\000\037\000\
\\018\000\036\000\019\000\035\000\020\000\034\000\021\000\033\000\
\\022\000\032\000\023\000\031\000\024\000\030\000\025\000\029\000\
\\026\000\028\000\000\000\
\\001\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\030\000\087\000\000\000\
\\001\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\034\000\142\000\000\000\
\\001\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\035\000\086\000\000\000\
\\001\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\035\000\167\000\000\000\
\\001\000\019\000\111\000\000\000\
\\001\000\019\000\120\000\000\000\
\\001\000\019\000\170\000\000\000\
\\001\000\019\000\175\000\000\000\
\\001\000\019\000\188\000\000\000\
\\001\000\027\000\085\000\000\000\
\\001\000\027\000\151\000\000\000\
\\001\000\037\000\048\000\042\000\047\000\043\000\046\000\044\000\045\000\000\000\
\\001\000\037\000\078\000\042\000\047\000\043\000\046\000\044\000\045\000\000\000\
\\001\000\037\000\099\000\042\000\047\000\044\000\045\000\000\000\
\\001\000\037\000\103\000\043\000\046\000\044\000\045\000\000\000\
\\001\000\037\000\107\000\042\000\047\000\043\000\046\000\000\000\
\\001\000\038\000\115\000\000\000\
\\001\000\038\000\131\000\000\000\
\\001\000\038\000\132\000\000\000\
\\001\000\038\000\133\000\000\000\
\\001\000\039\000\148\000\000\000\
\\192\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\193\000\017\000\037\000\018\000\036\000\000\000\
\\194\000\017\000\037\000\018\000\036\000\000\000\
\\195\000\000\000\
\\196\000\000\000\
\\197\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\000\000\
\\198\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\000\000\
\\199\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\000\000\
\\200\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\000\000\
\\201\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\000\000\
\\202\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\000\000\
\\203\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\000\000\
\\204\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\000\000\
\\205\000\000\000\
\\206\000\000\000\
\\207\000\000\000\
\\208\000\000\000\
\\209\000\000\000\
\\210\000\000\000\
\\211\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\214\000\000\000\
\\215\000\000\000\
\\216\000\000\000\
\\217\000\000\000\
\\218\000\000\000\
\\219\000\010\000\027\000\014\000\026\000\027\000\025\000\000\000\
\\220\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\
\\031\000\143\000\000\000\
\\221\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\222\000\000\000\
\\223\000\000\000\
\\224\000\000\000\
\\225\000\000\000\
\\226\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\227\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\228\000\000\000\
\\229\000\000\000\
\\230\000\000\000\
\\231\000\000\000\
\\232\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\233\000\000\000\
\\234\000\000\000\
\\235\000\000\000\
\\236\000\000\000\
\\237\000\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\238\000\000\000\
\\239\000\000\000\
\\240\000\000\000\
\\241\000\000\000\
\\242\000\000\000\
\\243\000\000\000\
\\244\000\000\000\
\\245\000\000\000\
\\246\000\000\000\
\\247\000\000\000\
\\248\000\000\000\
\\249\000\000\000\
\\250\000\000\000\
\\251\000\000\000\
\\252\000\000\000\
\\253\000\000\000\
\\254\000\000\000\
\\255\000\000\000\
\\000\001\042\000\047\000\000\000\
\\001\001\000\000\
\\002\001\044\000\045\000\000\000\
\\003\001\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\004\001\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\005\001\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\006\001\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\007\001\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\008\001\015\000\039\000\016\000\038\000\017\000\037\000\018\000\036\000\
\\019\000\035\000\020\000\034\000\021\000\033\000\022\000\032\000\
\\023\000\031\000\024\000\030\000\025\000\029\000\026\000\028\000\000\000\
\\009\001\000\000\
\\010\001\000\000\
\\011\001\000\000\
\\012\001\000\000\
\\013\001\000\000\
\\014\001\000\000\
\\015\001\000\000\
\\016\001\039\000\124\000\000\000\
\\017\001\000\000\
\\018\001\008\000\056\000\012\000\055\000\000\000\
\"
val actionRowNumbers =
"\003\000\077\000\076\000\078\000\
\\079\000\072\000\073\000\074\000\
\\071\000\084\000\075\000\057\000\
\\082\000\083\000\047\000\004\000\
\\003\000\003\000\003\000\001\000\
\\081\000\080\000\139\000\003\000\
\\005\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\
\\003\000\003\000\123\000\121\000\
\\048\000\048\000\048\000\006\000\
\\007\000\008\000\032\000\045\000\
\\038\000\036\000\070\000\031\000\
\\099\000\009\000\002\000\097\000\
\\138\000\035\000\069\000\068\000\
\\065\000\064\000\067\000\066\000\
\\063\000\062\000\060\000\061\000\
\\059\000\058\000\122\000\120\000\
\\049\000\050\000\051\000\032\000\
\\110\000\032\000\032\000\040\000\
\\025\000\033\000\052\000\003\000\
\\003\000\003\000\098\000\101\000\
\\003\000\104\000\041\000\022\000\
\\094\000\137\000\050\000\051\000\
\\107\000\113\000\049\000\051\000\
\\108\000\116\000\049\000\050\000\
\\109\000\119\000\053\000\054\000\
\\055\000\010\000\003\000\011\000\
\\012\000\090\000\037\000\091\000\
\\085\000\031\000\003\000\093\000\
\\096\000\003\000\003\000\111\000\
\\112\000\114\000\115\000\117\000\
\\118\000\087\000\088\000\089\000\
\\130\000\056\000\013\000\131\000\
\\124\000\046\000\026\000\027\000\
\\003\000\003\000\100\000\023\000\
\\022\000\102\000\014\000\134\000\
\\028\000\003\000\003\000\015\000\
\\016\000\039\000\086\000\103\000\
\\106\000\017\000\095\000\132\000\
\\018\000\125\000\129\000\042\000\
\\024\000\003\000\043\000\024\000\
\\003\000\034\000\136\000\019\000\
\\092\000\003\000\133\000\127\000\
\\029\000\030\000\023\000\003\000\
\\020\000\021\000\105\000\128\000\
\\044\000\024\000\003\000\135\000\
\\126\000\000\000"
val gotoT =
"\
\\001\000\011\000\002\000\189\000\014\000\010\000\016\000\009\000\
\\017\000\008\000\018\000\007\000\019\000\006\000\020\000\005\000\
\\021\000\004\000\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\042\000\008\000\041\000\010\000\040\000\011\000\039\000\
\\012\000\038\000\000\000\
\\000\000\
\\001\000\048\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\049\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\050\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\051\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\055\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\001\000\057\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\058\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\059\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\060\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\061\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\062\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\063\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\064\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\065\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\066\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\067\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\068\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\069\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\070\000\012\000\038\000\000\000\
\\008\000\071\000\011\000\039\000\000\000\
\\003\000\075\000\007\000\074\000\008\000\073\000\010\000\072\000\
\\011\000\039\000\012\000\038\000\000\000\
\\003\000\077\000\007\000\074\000\008\000\073\000\010\000\072\000\
\\011\000\039\000\012\000\038\000\000\000\
\\003\000\078\000\007\000\074\000\008\000\073\000\010\000\072\000\
\\011\000\039\000\012\000\038\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\082\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\086\000\000\000\
\\000\000\
\\000\000\
\\001\000\091\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\096\000\007\000\095\000\008\000\094\000\011\000\039\000\
\\012\000\038\000\000\000\
\\005\000\100\000\007\000\099\000\010\000\098\000\012\000\038\000\000\000\
\\006\000\104\000\008\000\103\000\010\000\102\000\011\000\039\000\000\000\
\\014\000\106\000\000\000\
\\000\000\
\\014\000\107\000\000\000\
\\014\000\108\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\114\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\115\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\116\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\117\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\025\000\119\000\000\000\
\\000\000\
\\000\000\
\\005\000\123\000\007\000\099\000\010\000\098\000\012\000\038\000\000\000\
\\006\000\124\000\008\000\103\000\010\000\102\000\011\000\039\000\000\000\
\\000\000\
\\000\000\
\\004\000\125\000\007\000\095\000\008\000\094\000\011\000\039\000\
\\012\000\038\000\000\000\
\\006\000\126\000\008\000\103\000\010\000\102\000\011\000\039\000\000\000\
\\000\000\
\\000\000\
\\004\000\127\000\007\000\095\000\008\000\094\000\011\000\039\000\
\\012\000\038\000\000\000\
\\005\000\128\000\007\000\099\000\010\000\098\000\012\000\038\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\132\000\000\000\
\\001\000\136\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\142\000\000\000\
\\001\000\143\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\144\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\145\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\153\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\154\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\023\000\155\000\000\000\
\\025\000\158\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\161\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\001\000\162\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\169\000\000\000\
\\001\000\172\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\013\000\174\000\000\000\
\\001\000\175\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\178\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\182\000\000\000\
\\001\000\183\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\187\000\000\000\
\\001\000\188\000\014\000\010\000\016\000\009\000\017\000\008\000\
\\018\000\007\000\019\000\006\000\020\000\005\000\021\000\004\000\
\\022\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 190
val numrules = 83
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | assignExp of unit ->  (A.exp)
 | params of unit ->  (A.exp -> A.exp list)
 | callExp of unit ->  (A.exp)
 | fields of unit ->  ( ( A.symbol * A.exp * A.pos )  ->  ( A.symbol * A.exp * A.pos )  list)
 | recCreate of unit ->  (A.exp) | arrCreate of unit ->  (A.exp)
 | letExp of unit ->  (A.exp) | forExp of unit ->  (A.exp)
 | whileExp of unit ->  (A.exp) | ifExp of unit ->  (A.exp)
 | lvalue of unit ->  (A.var)
 | sequence of unit ->  ( ( A.exp * int )  ->  ( A.exp * int )  list)
 | seqExp of unit ->  (A.exp)
 | argDef of unit ->  (A.field -> A.field list)
 | typeDec of unit ->  ({ name:A.symbol,ty:A.ty,pos:A.pos } )
 | funDec of unit ->  (A.fundec) | varDec of unit ->  (A.dec)
 | ty of unit ->  (A.ty)
 | funDecs of unit ->  (A.fundec option -> A.fundec list)
 | typDecs of unit ->  ({ name:A.symbol,ty:A.ty,pos:A.pos }  option -> { name:A.symbol,ty:A.ty,pos:A.pos }  list)
 | dec3 of unit ->  (A.dec -> A.dec list)
 | dec2 of unit ->  (A.dec -> A.dec list)
 | dec1 of unit ->  (A.dec -> A.dec list)
 | dec of unit ->  (A.dec -> A.dec list) | program of unit ->  (A.exp)
 | exp of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 31) => true | (T 32) => true | (T 33) => true | (T 39) => true
 | (T 35) => true | (T 36) => true | (T 37) => true | (T 41) => true
 | (T 42) => true | (T 43) => true | (T 27) => true | (T 28) => true
 | (T 29) => true | (T 30) => true | (T 34) => true | (T 38) => true
 | (T 40) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 29))::
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 7))::
(nil
 $$ (T 18),nil
 $$ (T 26))::
(nil
 $$ (T 26),nil
 $$ (T 18))::
(nil
 $$ (T 30) $$ (T 6),nil
 $$ (T 30))::
(nil
,nil
 $$ (T 37) $$ (T 2) $$ (T 36))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "AND"
  | (T 25) => "OR"
  | (T 26) => "ASSIGN"
  | (T 27) => "ARRAY"
  | (T 28) => "IF"
  | (T 29) => "THEN"
  | (T 30) => "ELSE"
  | (T 31) => "WHILE"
  | (T 32) => "FOR"
  | (T 33) => "TO"
  | (T 34) => "DO"
  | (T 35) => "LET"
  | (T 36) => "IN"
  | (T 37) => "END"
  | (T 38) => "OF"
  | (T 39) => "BREAK"
  | (T 40) => "NIL"
  | (T 41) => "FUNCTION"
  | (T 42) => "VAR"
  | (T 43) => "TYPE"
  | (T 44) => "UMINUS"
  | (T 45) => "SHIFT"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11)
 $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ 
(T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
PLUSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.OpExp({left = exp1, oper = A.PlusOp, pos = PLUSleft, right = exp2}))

end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
MINUSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.OpExp({left = exp1, oper = A.MinusOp, pos = MINUSleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
DIVIDEleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)
) => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.OpExp({left = exp1, oper = A.DivideOp, pos = DIVIDEleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
TIMESleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.OpExp({left = exp1, oper = A.TimesOp, pos = TIMESleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, EQleft
, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left = exp1, oper = A.EqOp, pos = EQleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
NEQleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.OpExp({left = exp1, oper = A.NeqOp, pos = NEQleft, right = exp2}))

end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, GTleft
, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left = exp1, oper = A.GtOp, pos = GTleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, GEleft
, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left = exp1, oper = A.GeOp, pos = GEleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, LTleft
, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left = exp1, oper = A.LtOp, pos = LTleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
LEleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp({left = exp1, oper = A.LeOp, pos = LEleft, right = exp2})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
ANDleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp({test = exp1, then' = exp2, else' = SOME (A.IntExp(0)), pos = ANDleft})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
ORleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp({test = exp1, then' = A.IntExp(1), else' = SOME exp2, pos = ORleft})
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 in (
A.OpExp({left = A.IntExp(0), oper = A.MinusOp, pos = MINUSleft, right = exp})
)
end)
 in ( LrTable.NT 0, ( result, MINUS1left, exp1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.ifExp ifExp1, ifExp1left, ifExp1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (ifExp
 as ifExp1) = ifExp1 ()
 in (ifExp)
end)
 in ( LrTable.NT 0, ( result, ifExp1left, ifExp1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.letExp letExp1, letExp1left, letExp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
letExp as letExp1) = letExp1 ()
 in (letExp)
end)
 in ( LrTable.NT 0, ( result, letExp1left, letExp1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.forExp forExp1, forExp1left, forExp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
forExp as forExp1) = forExp1 ()
 in (forExp)
end)
 in ( LrTable.NT 0, ( result, forExp1left, forExp1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.whileExp whileExp1, whileExp1left, 
whileExp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (whileExp as whileExp1) = whileExp1 ()
 in (whileExp)
end)
 in ( LrTable.NT 0, ( result, whileExp1left, whileExp1right), rest671)

end
|  ( 18, ( ( _, ( MlyValue.seqExp seqExp1, seqExp1left, seqExp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
seqExp as seqExp1) = seqExp1 ()
 in (seqExp)
end)
 in ( LrTable.NT 0, ( result, seqExp1left, seqExp1right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.callExp callExp1, callExp1left, 
callExp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (callExp as callExp1) = callExp1 ()
 in (callExp)
end)
 in ( LrTable.NT 0, ( result, callExp1left, callExp1right), rest671)

end
|  ( 20, ( ( _, ( MlyValue.assignExp assignExp1, assignExp1left, 
assignExp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (assignExp as assignExp1) = assignExp1 ()
 in (assignExp)
end)
 in ( LrTable.NT 0, ( result, assignExp1left, assignExp1right), 
rest671)
end
|  ( 21, ( ( _, ( MlyValue.recCreate recCreate1, recCreate1left, 
recCreate1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (recCreate as recCreate1) = recCreate1 ()
 in (recCreate)
end)
 in ( LrTable.NT 0, ( result, recCreate1left, recCreate1right), 
rest671)
end
|  ( 22, ( ( _, ( MlyValue.arrCreate arrCreate1, arrCreate1left, 
arrCreate1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (arrCreate as arrCreate1) = arrCreate1 ()
 in (arrCreate)
end)
 in ( LrTable.NT 0, ( result, arrCreate1left, arrCreate1right), 
rest671)
end
|  ( 23, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.exp (fn _ => let val  (INT as INT1) = 
INT1 ()
 in (A.IntExp(INT))
end)
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left)
, STRING1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp(STRING, STRINGleft))
end)
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 25, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 26, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => (
A.BreakExp(BREAKleft)))
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp(lvalue))
end)
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.ifExp (fn _ => let val  exp1 =
 exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp({test = exp1, then' = exp2, else' = NONE, pos = IFleft}))

end)
 in ( LrTable.NT 16, ( result, IF1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.ifExp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.IfExp({test = exp1, then' = exp2, else' = SOME exp3, pos = IFleft}))

end)
 in ( LrTable.NT 16, ( result, IF1left, exp3right), rest671)
end
|  ( 30, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.seqExp seqExp1,
 _, _)) :: ( _, ( MlyValue.dec dec1, _, _)) :: ( _, ( MlyValue.varDec 
varDec1, _, _)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671))
 => let val  result = MlyValue.letExp (fn _ => let val  (varDec as 
varDec1) = varDec1 ()
 val  (dec as dec1) = dec1 ()
 val  (seqExp as seqExp1) = seqExp1 ()
 in (A.LetExp({decs = (dec varDec), body = seqExp, pos = LETleft}))

end)
 in ( LrTable.NT 19, ( result, LET1left, END1right), rest671)
end
|  ( 31, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.seqExp seqExp1,
 _, _)) :: ( _, ( MlyValue.dec dec1, _, _)) :: ( _, ( MlyValue.funDecs
 funDecs1, _, _)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671))
 => let val  result = MlyValue.letExp (fn _ => let val  (funDecs as 
funDecs1) = funDecs1 ()
 val  (dec as dec1) = dec1 ()
 val  (seqExp as seqExp1) = seqExp1 ()
 in (
A.LetExp({decs = (dec (A.FunctionDec(funDecs NONE))), body = seqExp, pos = LETleft})
)
end)
 in ( LrTable.NT 19, ( result, LET1left, END1right), rest671)
end
|  ( 32, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.seqExp seqExp1,
 _, _)) :: ( _, ( MlyValue.dec dec1, _, _)) :: ( _, ( MlyValue.typDecs
 typDecs1, _, _)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671))
 => let val  result = MlyValue.letExp (fn _ => let val  (typDecs as 
typDecs1) = typDecs1 ()
 val  (dec as dec1) = dec1 ()
 val  (seqExp as seqExp1) = seqExp1 ()
 in (
A.LetExp({decs = (dec (A.TypeDec(typDecs NONE))), body = seqExp, pos = LETleft})
)
end)
 in ( LrTable.NT 19, ( result, LET1left, END1right), rest671)
end
|  ( 33, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.seqExp seqExp1,
 _, _)) :: _ :: ( _, ( _, (LETleft as LET1left), _)) :: rest671)) =>
 let val  result = MlyValue.letExp (fn _ => let val  (seqExp as 
seqExp1) = seqExp1 ()
 in (A.LetExp({decs = [], body = seqExp, pos = LETleft}))
end)
 in ( LrTable.NT 19, ( result, LET1left, END1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.whileExp (fn _ => let val 
 exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp({test = exp1, body = exp2, pos = WHILEleft}))
end)
 in ( LrTable.NT 17, ( result, WHILE1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.forExp (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp({var = Symbol.symbol(ID), escape = ref true,
                                                        lo = exp1, hi = exp2, body = exp3, pos = FORleft})
)
end)
 in ( LrTable.NT 18, ( result, FOR1left, exp3right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.params params1, _, params1right)) :: ( _, (
 MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.callExp (fn _
 => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 val  (params as params1) = params1 ()
 in (
A.CallExp({func=Symbol.symbol(ID), args = (params exp), pos = IDleft})
)
end)
 in ( LrTable.NT 23, ( result, ID1left, params1right), rest671)
end
|  ( 37, ( ( _, ( _, _, RPAREN1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.callExp (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.CallExp({func=Symbol.symbol(ID), args = [], pos = IDleft}))
end
)
 in ( LrTable.NT 23, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.params params1, _, params1right)) :: ( _, (
 MlyValue.exp exp1, _, _)) :: ( _, ( _, COMMA1left, _)) :: rest671))
 => let val  result = MlyValue.params (fn _ => let val  (exp as exp1)
 = exp1 ()
 val  (params as params1) = params1 ()
 in (fn e => e::(params exp))
end)
 in ( LrTable.NT 24, ( result, COMMA1left, params1right), rest671)
end
|  ( 39, ( ( _, ( _, RPAREN1left, RPAREN1right)) :: rest671)) => let
 val  result = MlyValue.params (fn _ => (fn e => e::[]))
 in ( LrTable.NT 24, ( result, RPAREN1left, RPAREN1right), rest671)

end
|  ( 40, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, lvalue1left, _)) :: rest671)) => let val  
result = MlyValue.assignExp (fn _ => let val  (lvalue as lvalue1) = 
lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp({var = lvalue, exp = exp, pos = lvalue1left}))
end)
 in ( LrTable.NT 25, ( result, lvalue1left, exp1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.sequence sequence1, _, sequence1right)) :: 
( _, ( MlyValue.exp exp1, expleft, _)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.seqExp (fn _ => let val  (
exp as exp1) = exp1 ()
 val  (sequence as sequence1) = sequence1 ()
 in (A.SeqExp(sequence (exp, expleft)))
end)
 in ( LrTable.NT 13, ( result, LPAREN1left, sequence1right), rest671)

end
|  ( 42, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.seqExp (fn _ => (
A.SeqExp([])))
 in ( LrTable.NT 13, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 43, ( ( _, ( MlyValue.sequence sequence1, _, sequence1right)) :: 
( _, ( MlyValue.exp exp1, expleft, _)) :: ( _, ( _, SEMICOLON1left, _)
) :: rest671)) => let val  result = MlyValue.sequence (fn _ => let
 val  (exp as exp1) = exp1 ()
 val  (sequence as sequence1) = sequence1 ()
 in (fn e => e::(sequence (exp, expleft)))
end)
 in ( LrTable.NT 14, ( result, SEMICOLON1left, sequence1right), 
rest671)
end
|  ( 44, ( ( _, ( _, RPAREN1left, RPAREN1right)) :: rest671)) => let
 val  result = MlyValue.sequence (fn _ => (fn e => e::[]))
 in ( LrTable.NT 14, ( result, RPAREN1left, RPAREN1right), rest671)

end
|  ( 45, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
OFleft, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, lvalue1left, _)) :: rest671)) => let val  
result = MlyValue.arrCreate (fn _ => let val  (lvalue as lvalue1) = 
lvalue1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
case lvalue of A.SimpleVar(s, p) => A.ArrayExp({typ=s, size=exp1, init=exp2, pos=p})
                                                            | _ => ((ErrorMsg.error OFleft ("Illegal lValue used for array creation. Must use ID."));
                                                                    A.NilExp)
)
end)
 in ( LrTable.NT 20, ( result, lvalue1left, exp2right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.fields fields1, _, fields1right)) :: ( _, (
 MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID2, _, _)) :: _
 :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) =>
 let val  result = MlyValue.recCreate (fn _ => let val  (ID as ID1) = 
ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 val  (fields as fields1) = fields1 ()
 in (
A.RecordExp({fields = (fields (Symbol.symbol(ID), exp, IDleft)), typ = Symbol.symbol(ID), pos = IDleft})
)
end)
 in ( LrTable.NT 21, ( result, ID1left, fields1right), rest671)
end
|  ( 47, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.recCreate (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.RecordExp({fields = [], typ = Symbol.symbol(ID), pos = IDleft})
)
end)
 in ( LrTable.NT 21, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.fields fields1, _, fields1right)) :: ( _, (
 MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, IDleft, _))
 :: ( _, ( _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.fields (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 val  (fields as fields1) = fields1 ()
 in (fn e => e::(fields (Symbol.symbol(ID), exp, IDleft)))
end)
 in ( LrTable.NT 22, ( result, COMMA1left, fields1right), rest671)
end
|  ( 49, ( ( _, ( _, RBRACE1left, RBRACE1right)) :: rest671)) => let
 val  result = MlyValue.fields (fn _ => (fn e => e::[]))
 in ( LrTable.NT 22, ( result, RBRACE1left, RBRACE1right), rest671)

end
|  ( 50, ( ( _, ( MlyValue.dec1 dec11, _, dec11right)) :: ( _, ( 
MlyValue.varDec varDec1, varDec1left, _)) :: rest671)) => let val  
result = MlyValue.dec (fn _ => let val  (varDec as varDec1) = varDec1
 ()
 val  (dec1 as dec11) = dec11 ()
 in (fn e => e::(dec1 varDec))
end)
 in ( LrTable.NT 2, ( result, varDec1left, dec11right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.dec2 dec21, _, dec21right)) :: ( _, ( 
MlyValue.funDecs funDecs1, funDecs1left, _)) :: rest671)) => let val  
result = MlyValue.dec (fn _ => let val  (funDecs as funDecs1) = 
funDecs1 ()
 val  (dec2 as dec21) = dec21 ()
 in (fn e => e::(dec2 (A.FunctionDec(funDecs NONE))))
end)
 in ( LrTable.NT 2, ( result, funDecs1left, dec21right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.dec3 dec31, _, dec31right)) :: ( _, ( 
MlyValue.typDecs typDecs1, typDecs1left, _)) :: rest671)) => let val  
result = MlyValue.dec (fn _ => let val  (typDecs as typDecs1) = 
typDecs1 ()
 val  (dec3 as dec31) = dec31 ()
 in (fn e => e::(dec3 (A.TypeDec(typDecs NONE))))
end)
 in ( LrTable.NT 2, ( result, typDecs1left, dec31right), rest671)
end
|  ( 53, ( ( _, ( _, IN1left, IN1right)) :: rest671)) => let val  
result = MlyValue.dec (fn _ => (fn e => e::[]))
 in ( LrTable.NT 2, ( result, IN1left, IN1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.dec2 dec21, _, dec21right)) :: ( _, ( 
MlyValue.funDecs funDecs1, funDecs1left, _)) :: rest671)) => let val  
result = MlyValue.dec1 (fn _ => let val  (funDecs as funDecs1) = 
funDecs1 ()
 val  (dec2 as dec21) = dec21 ()
 in (fn e => e::(dec2 (A.FunctionDec(funDecs NONE))))
end)
 in ( LrTable.NT 3, ( result, funDecs1left, dec21right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.dec3 dec31, _, dec31right)) :: ( _, ( 
MlyValue.typDecs typDecs1, typDecs1left, _)) :: rest671)) => let val  
result = MlyValue.dec1 (fn _ => let val  (typDecs as typDecs1) = 
typDecs1 ()
 val  (dec3 as dec31) = dec31 ()
 in (fn e => e::(dec3 (A.TypeDec(typDecs NONE))))
end)
 in ( LrTable.NT 3, ( result, typDecs1left, dec31right), rest671)
end
|  ( 56, ( ( _, ( _, IN1left, IN1right)) :: rest671)) => let val  
result = MlyValue.dec1 (fn _ => (fn e => e::[]))
 in ( LrTable.NT 3, ( result, IN1left, IN1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.dec1 dec11, _, dec11right)) :: ( _, ( 
MlyValue.varDec varDec1, varDec1left, _)) :: rest671)) => let val  
result = MlyValue.dec2 (fn _ => let val  (varDec as varDec1) = varDec1
 ()
 val  (dec1 as dec11) = dec11 ()
 in (fn e => e::(dec1 varDec))
end)
 in ( LrTable.NT 4, ( result, varDec1left, dec11right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.dec3 dec31, _, dec31right)) :: ( _, ( 
MlyValue.typDecs typDecs1, typDecs1left, _)) :: rest671)) => let val  
result = MlyValue.dec2 (fn _ => let val  (typDecs as typDecs1) = 
typDecs1 ()
 val  (dec3 as dec31) = dec31 ()
 in (fn e => e::(dec3 (A.TypeDec(typDecs NONE))))
end)
 in ( LrTable.NT 4, ( result, typDecs1left, dec31right), rest671)
end
|  ( 59, ( ( _, ( _, IN1left, IN1right)) :: rest671)) => let val  
result = MlyValue.dec2 (fn _ => (fn e => e::[]))
 in ( LrTable.NT 4, ( result, IN1left, IN1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.dec1 dec11, _, dec11right)) :: ( _, ( 
MlyValue.varDec varDec1, varDec1left, _)) :: rest671)) => let val  
result = MlyValue.dec3 (fn _ => let val  (varDec as varDec1) = varDec1
 ()
 val  (dec1 as dec11) = dec11 ()
 in (fn e => e::(dec1 varDec))
end)
 in ( LrTable.NT 5, ( result, varDec1left, dec11right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.dec2 dec21, _, dec21right)) :: ( _, ( 
MlyValue.funDecs funDecs1, funDecs1left, _)) :: rest671)) => let val  
result = MlyValue.dec3 (fn _ => let val  (funDecs as funDecs1) = 
funDecs1 ()
 val  (dec2 as dec21) = dec21 ()
 in (fn e => e::(dec2 (A.FunctionDec(funDecs NONE))))
end)
 in ( LrTable.NT 5, ( result, funDecs1left, dec21right), rest671)
end
|  ( 62, ( ( _, ( _, IN1left, IN1right)) :: rest671)) => let val  
result = MlyValue.dec3 (fn _ => (fn e => e::[]))
 in ( LrTable.NT 5, ( result, IN1left, IN1right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.funDecs funDecs1, _, funDecs1right)) :: ( _
, ( MlyValue.funDec funDec1, funDec1left, _)) :: rest671)) => let val 
 result = MlyValue.funDecs (fn _ => let val  (funDec as funDec1) = 
funDec1 ()
 val  (funDecs as funDecs1) = funDecs1 ()
 in (
fn SOME(e) => e::(funDecs (SOME(funDec)))
                                          | NONE => funDecs (SOME(funDec))
)
end)
 in ( LrTable.NT 7, ( result, funDec1left, funDecs1right), rest671)

end
|  ( 64, ( ( _, ( MlyValue.funDec funDec1, funDec1left, funDec1right))
 :: rest671)) => let val  result = MlyValue.funDecs (fn _ => let val 
 (funDec as funDec1) = funDec1 ()
 in (
fn SOME(e) => e::funDec::[]
                                          | NONE => funDec::[]
)
end)
 in ( LrTable.NT 7, ( result, funDec1left, funDec1right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.typDecs typDecs1, _, typDecs1right)) :: ( _
, ( MlyValue.typeDec typeDec1, typeDec1left, _)) :: rest671)) => let
 val  result = MlyValue.typDecs (fn _ => let val  (typeDec as typeDec1
) = typeDec1 ()
 val  (typDecs as typDecs1) = typDecs1 ()
 in (
fn SOME(e) => e::(typDecs (SOME(typeDec)))
                                          | NONE => typDecs (SOME(typeDec))
)
end)
 in ( LrTable.NT 6, ( result, typeDec1left, typDecs1right), rest671)

end
|  ( 66, ( ( _, ( MlyValue.typeDec typeDec1, typeDec1left, 
typeDec1right)) :: rest671)) => let val  result = MlyValue.typDecs (fn
 _ => let val  (typeDec as typeDec1) = typeDec1 ()
 in (
fn SOME(e) => e::typeDec::[]
                                          | NONE => typeDec::[]
)
end)
 in ( LrTable.NT 6, ( result, typeDec1left, typeDec1right), rest671)

end
|  ( 67, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.varDec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec({  name=Symbol.symbol(ID),
                                             escape=ref true,
                                             typ=NONE,
                                             init=exp,
                                             pos=VARleft})
)
end)
 in ( LrTable.NT 9, ( result, VAR1left, exp1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.varDec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec({  name=Symbol.symbol(ID1),
                                            escape=ref true,
                                            typ=SOME((Symbol.symbol ID2), ID2left),
                                            init=exp,
                                            pos=VARleft})
)
end)
 in ( LrTable.NT 9, ( result, VAR1left, exp1right), rest671)
end
|  ( 69, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID4, ID4left, _)) :: _ :: _ :: ( _, ( MlyValue.argDef 
argDef1, _, _)) :: ( _, ( MlyValue.ID ID3, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let
 val  result = MlyValue.funDec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  ID3 = ID3 ()
 val  (argDef as argDef1) = argDef1 ()
 val  ID4 = ID4 ()
 val  (exp as exp1) = exp1 ()
 in (
{ name=(Symbol.symbol(ID1)),
                                                                                    params=(argDef
                                                                                        {name=(Symbol.symbol(ID2)),
                                                                                        escape=ref true,
                                                                                        typ=(Symbol.symbol(ID3)),
                                                                                        pos=ID2left}),
                                                                                    result=SOME((Symbol.symbol(ID4)), ID4left),
                                                                                    body=exp,
                                                                                    pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 10, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 70, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: _ :: ( _, ( MlyValue.ID ID1
, _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671)
) => let val  result = MlyValue.funDec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
{ name=(Symbol.symbol(ID1)),
                                                                                    params=([]),
                                                                                    result=SOME((Symbol.symbol(ID2)), ID2left),
                                                                                    body=exp,
                                                                                    pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 10, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 71, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.argDef argDef1, _, _)) :: ( _, ( MlyValue.ID ID3, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID 
ID1, _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: 
rest671)) => let val  result = MlyValue.funDec (fn _ => let val  ID1 =
 ID1 ()
 val  ID2 = ID2 ()
 val  ID3 = ID3 ()
 val  (argDef as argDef1) = argDef1 ()
 val  (exp as exp1) = exp1 ()
 in (
{ name=(Symbol.symbol(ID1)),
                                                                                    params=(argDef
                                                                                        {name=(Symbol.symbol(ID2)),
                                                                                        escape=ref true,
                                                                                        typ=(Symbol.symbol(ID3)),
                                                                                        pos=ID2left}),
                                                                                    result=NONE,
                                                                                    body=exp,
                                                                                    pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 10, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: _ :: 
( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FUNCTIONleft as 
FUNCTION1left), _)) :: rest671)) => let val  result = MlyValue.funDec
 (fn _ => let val  ID1 = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
{ name=(Symbol.symbol(ID1)),
                                                                                    params=([]),
                                                                                    result=NONE,
                                                                                    body=exp,
                                                                                    pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 10, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.typeDec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ({name=Symbol.symbol(ID), ty=ty, pos=TYPEleft})
end)
 in ( LrTable.NT 11, ( result, TYPE1left, ty1right), rest671)
end
|  ( 74, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy(Symbol.symbol(ID), IDleft))
end)
 in ( LrTable.NT 8, ( result, ID1left, ID1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))
end)
 in ( LrTable.NT 8, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.argDef argDef1, _, argDef1right)) :: ( _, (
 MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, IDleft, _))
 :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (argDef as argDef1) = argDef1 ()
 in (
A.RecordTy(argDef ({name=(Symbol.symbol(ID1)), escape=ref true, typ=(Symbol.symbol(ID2)), pos=IDleft}))
)
end)
 in ( LrTable.NT 8, ( result, LBRACE1left, argDef1right), rest671)
end
|  ( 77, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( _, LBRACE1left, _))
 :: rest671)) => let val  result = MlyValue.ty (fn _ => (
A.RecordTy([])))
 in ( LrTable.NT 8, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 78, ( ( _, ( MlyValue.argDef argDef1, _, argDef1right)) :: ( _, (
 MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, IDleft, _))
 :: ( _, ( _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.argDef (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (argDef as argDef1) = argDef1 ()
 in (
fn e => e::(argDef ({name=(Symbol.symbol(ID1)), escape=ref true, typ=(Symbol.symbol(ID2)), pos=IDleft}))
)
end)
 in ( LrTable.NT 12, ( result, COMMA1left, argDef1right), rest671)
end
|  ( 79, ( ( _, ( _, RBRACE1left, RBRACE1right)) :: rest671)) => let
 val  result = MlyValue.argDef (fn _ => (fn e => e::[]))
 in ( LrTable.NT 12, ( result, RBRACE1left, RBRACE1right), rest671)

end
|  ( 80, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: ( _, ( _, LBRACKleft, _)) :: ( _, ( MlyValue.lvalue lvalue1, 
lvalue1left, _)) :: rest671)) => let val  result = MlyValue.lvalue (fn
 _ => let val  (lvalue as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.SubscriptVar(lvalue, exp, LBRACKleft))
end)
 in ( LrTable.NT 15, ( result, lvalue1left, RBRACK1right), rest671)

end
|  ( 81, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( _, DOTleft,
 _)) :: ( _, ( MlyValue.lvalue lvalue1, lvalue1left, _)) :: rest671))
 => let val  result = MlyValue.lvalue (fn _ => let val  (lvalue as 
lvalue1) = lvalue1 ()
 val  (ID as ID1) = ID1 ()
 in (A.FieldVar(lvalue, Symbol.symbol(ID), DOTleft))
end)
 in ( LrTable.NT 15, ( result, lvalue1left, ID1right), rest671)
end
|  ( 82, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.lvalue (fn _ => let val  (ID
 as ID1) = ID1 ()
 in (A.SimpleVar(Symbol.symbol(ID), IDleft))
end)
 in ( LrTable.NT 15, ( result, ID1left, ID1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun SHIFT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
end
end
